import re
import os
from scripts import *

working_dir = config["work_folder"]

path,ext = os.path.splitext(config["in_file"])

in_call = config["in_file"]

cores = int(config["threads"])

if "sam_bam" in config["samtools_selection"]:

    rule samtoool_sambam:
        input: 
            in_call,
        output:
            working_dir + "/{sample}/mapped_reads/{sample}.bam",
        threads: cores
        params:
            adv = config["par_sambam"]["adv"]
        log:
            working_dir + "/{sample}/logs/samtools_view.log"
        shell:
            "samtools view -@ {threads} {params.adv} -b {input} > {output}"

else:
    if "False" in config["dorado_minimap2"]:
    
        if ext==".fastq":
            rule minimap2:
                input:
                    fa=config["ref_genome"],
                    infile=config["in_file"],
                output:
                    working_dir + "/{sample}/mapped_reads/{sample}.bam"
                threads: cores
                params:
                    adv1 = config["par_alnano"]["adv"],
                    adv2 = config["par_sambam"]["adv"]
                log:
                    working_dir + "/{sample}/logs/minimap2.log"
                run:
                    shell("minimap2 -a -x map-ont -t {threads} {params.adv1} {input.fa} {input.infile} | samtools view -@ {threads} {params.adv2} -Sb - > {output}")
        
        else:
            rule dorado:
                input:
                    in_call
                output:
                    working_dir + "/{sample}/mapped_reads/{sample}.bam"
                params:
                    adv = config["par_dorado"]["adv"],
                    mdl = config["par_dorado"]["model"],
                    par1 = config["par_dorado"]["--device"],
                    par2 = config["par_dorado"]["--modified-bases"],
                    dor_path = config["tool_usage"]["dorado"],
                    dor_mdl_fold = config["tool_usage"]["dorado_mdl"]
                log:
                    working_dir + "/{sample}/logs/dorado.log"
                shell:
                    "{params.dor_path} basecaller {params.dor_mdl_fold}/{params.mdl} {input} {params.par1} {params.par2} {params.adv} > {output}"
    
    else:
    
        rule dorado_alig:
            input:
                in_call
            output:
                working_dir + "/{sample}/mapped_reads/{sample}.bam"
            params:
                adv = config["par_dorado"]["adv"],
                ref = config["ref_genome"],
                mdl = config["par_dorado"]["model"],
                par1 = config["par_dorado"]["--device"],
                par2 = config["par_dorado"]["--modified-bases"],
                dor_path = config["tool_usage"]["dorado"],
                dor_mdl_fold = config["tool_usage"]["dorado_mdl"]
            log:
                working_dir + "/{sample}/logs/dorado_minimap2.log"
            shell:
                "{params.dor_path} basecaller {params.dor_mdl_fold}/{params.mdl} {input} {params.par1} {params.par2} {params.adv} --reference {params.ref} > {output}"
    
if "sorting" in config["samtools_selection"]:
    if ext==".bam":
        input_sort=in_call
    else:
        input_sort=working_dir + "/{sample}/mapped_reads/{sample}.bam"

    rule samtools_sort:
        input:
            bam=input_sort
        output:
            bam=working_dir + "/{sample}/sorted_reads/{sample}_sorted.bam",
        threads: cores
        params:
            adv = config["par_srtbam"]["adv"]
        log:
            working_dir + "/{sample}/logs/samtools_sort.log"
        shell:
            "samtools sort -@ {threads} {params.adv} -O bam {input.bam} > {output.bam}"

if "indexing" in config["samtools_selection"] and "sorting" not in config["samtools_selection"]:
    rule samtools_copy:
        input:
            in_call
        output:
            working_dir + "/{sample}/sorted_reads/{sample}_sorted.bam"
        shell:
            "cp {input} {output}"

if "indexing" in config["samtools_selection"]:
    rule samtools_index:
        input:
            working_dir + "/{sample}/sorted_reads/{sample}_sorted.bam"
        output:
            working_dir + "/{sample}/sorted_reads/{sample}_sorted.bam.bai"
        threads: cores
        params:
            adv = config["par_idxbam"]["adv"]
        log:
            working_dir + "/{sample}/logs/samtools_index.log"
        shell:
            "samtools index -@ {threads} {params.adv} {input}"

if ext==".bam" and config["samtools_selection"]==[]:
    input_varcall=in_call
else:
    input_varcall=working_dir + "/{sample}/sorted_reads/{sample}_sorted.bam"

rule snv_longshot:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        bai=input_varcall+".bai"
    conda:
        config["conda_envs"]["longshot"]
    output:
        working_dir + "/{sample}/snv/{sample}_longshot.vcf"
    params:
        adv = config["par_long"]["adv"],
        par1 = config["par_long"]["--region"],
        par2 = config["par_long"]["--min_cov"],
        par3 = config["par_long"]["--max_cov"],
        par4 = config["par_long"]["--min_mapq"],
        par5 = config["par_long"]["--min_alt_count"],
        par6 = config["par_long"]["--min_alt_frac"]
    log:
        working_dir + "/{sample}/logs/longshot.log"
    shell:
        "longshot {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par6} {params.adv} --bam {input.bam} --ref {input.fa} --out {output}"

rule snv_longshot_vep:
    input:
        working_dir + "/{sample}/snv/{sample}_longshot.vcf"
    output:
        working_dir + "/{sample}/snv/{sample}_longshot_vep.vcf"
    conda:
        config["conda_envs"]["vep"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_vep"]["adv"],
        par1 = only_flag(config["par_vep"]["--everything"]),
        par2 = only_flag(config["par_vep"]["--cache"]),
        par3 = config["par_vep"]["--dir_cache"],
        par4 = only_flag(config["par_vep"]["--coding_only"]),
        par5 = only_flag(config["par_vep"]["--no_intergenic"]),
        par6 = hg_to_GRCh(config["ref_version"]),
        par7 = config["par_vep"]["--offline"]
    log:
        working_dir + "/{sample}/logs/longshot_vep.log"
    shell:
        "vep -format vcf -i {input} -o {output} --vcf --fork {threads} --assembly {params.par6} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par7} {params.adv}"

rule snv_nanocaller:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        bai=input_varcall+".bai"
    output:
        directory(working_dir + "/{sample}/snv/{sample}_nanocaller")
    conda:
        config["conda_envs"]["nanocaller"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_nanoc"]["adv"],
        par1 = config["par_nanoc"]["--mode"],
        par2 = config["par_nanoc"]["--mincov"],
        par3 = config["par_nanoc"]["--maxcov"],
        par4 = empty_flag(config["par_nanoc"]["--bed"]),
        par5 = only_flag(config["par_nanoc"]["--phase"])
    log:
        working_dir + "/{sample}/logs/nanocaller.log"
    shell:
        "NanoCaller {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} --cpu {threads} {params.adv} --bam {input.bam} --ref {input.fa} --output {output}"

rule snv_nanocaller_vep:
    input:
        working_dir + "/{sample}/snv/{sample}_nanocaller"
    output:
        working_dir + "/{sample}/snv/{sample}_nanocaller_vep.vcf"
    conda:
        config["conda_envs"]["vep"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_vep"]["adv"],
        par1 = only_flag(config["par_vep"]["--everything"]),
        par2 = only_flag(config["par_vep"]["--cache"]),
        par3 = config["par_vep"]["--dir_cache"],
        par4 = only_flag(config["par_vep"]["--coding_only"]),
        par5 = only_flag(config["par_vep"]["--no_intergenic"]),
        par6 = hg_to_GRCh(config["ref_version"]),
        par7 = config["par_vep"]["--offline"]
    log:
        working_dir + "/{sample}/logs/nanocaller_vep.log"
    shell:
        "vep -format vcf -i {input}/variant_calls.vcf.gz -o {output} --vcf --fork {threads} --assembly {params.par6} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par7} {params.adv}"
 
rule snv_clair3:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        bai=input_varcall+".bai"
    output:
        directory(working_dir + "/{sample}/snv/{sample}_clair3")
    conda:
        config["conda_envs"]["clair3"]
    threads: (paralelization_func(int(config["paral_threads"]), config)/4)
    params:
        mod = config["par_cla3"]["--model_path"],
        adv = config["par_cla3"]["adv"],
        par1 = config["par_cla3"]["--bed_fn"],
        par2 = config["par_cla3"]["--qual"],
        par3 = config["par_cla3"]["--snp_min_af"],
        par4 = config["par_cla3"]["--indel_min_af"],
        par5 = config["par_cla3"]["--min_mq"],
        par6 = only_flag(config["par_cla3"]["--call_snp_only"]),
        cla_usage = config["tool_usage"]["clair3"]
    log:
        working_dir + "/{sample}/logs/clair3.log"
    shell:
        "{params.cla_usage} --bam_fn={input.bam} --ref_fn={input.fa} --output={output} --threads={threads} --platform=ont {params.mod} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.adv}"

rule snv_clair3_vep:
    input:
        working_dir + "/{sample}/snv/{sample}_clair3"
    output:
        working_dir + "/{sample}/snv/{sample}_clair3_vep.vcf"
    conda:
        config["conda_envs"]["vep"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_vep"]["adv"],
        par1 = only_flag(config["par_vep"]["--everything"]),
        par2 = only_flag(config["par_vep"]["--cache"]),
        par3 = config["par_vep"]["--dir_cache"],
        par4 = only_flag(config["par_vep"]["--coding_only"]),
        par5 = only_flag(config["par_vep"]["--no_intergenic"]),
        par6 = hg_to_GRCh(config["ref_version"]),
        par7 = config["par_vep"]["--offline"]
    log:
        working_dir + "/{sample}/logs/clair3_vep.log"
    shell:
        "vep -format vcf -i {input}/merge_output.vcf.gz -o {output} --vcf --fork {threads} --assembly {params.par6} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par7} {params.adv}"

rule snv_deepvariant:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        fa_fold=os.path.dirname(config["ref_genome"])
    output:
        directory(working_dir+ "/{sample}/snv/{sample}_deepvariant")
    #singularity: config["sing_sif"]["deepvariant"]
    conda: config["conda_envs"]["deepvariant"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        sing_loc = config["sing_sif"]["deepvariant"],
        bind_in = os.path.dirname(config["cstm_name"]),
        bind_out = working_dir,
        bind_ref = os.path.dirname(config["ref_genome"]),
        bind_bam = os.path.dirname(input_varcall),
        adv = config["par_deep"]["adv"],
        bam_fold=os.path.dirname(input_varcall),
        par1 = config["par_deep"]["--region"],
        par2 = config["par_deep"]["--pepper_min_mapq"],
        par3 = config["par_deep"]["--pepper_min_snp_baseq"],
        par4 = config["par_deep"]["--pepper_min_indel_baseq"],
        par5 = config["par_deep"]["--pepper_snp_frequency"],
        par6 = config["par_deep"]["--pepper_insert_frequency"],
        par7 = config["par_deep"]["--pepper_delete_frequency"],
        par8 = only_flag(config["par_deep"]["--pepper_skip_indels"]),
        par9 = config["par_deep"]["--dv_min_mapping_quality"],
        par10 = config["par_deep"]["--dv_min_base_quality"]
    log:
        working_dir + "/{sample}/logs/deepvariant.log"
    shell:
        """
        singularity exec --bind {params.bind_in},{params.bind_out},{params.bind_ref},{params.bind_bam} \
	{params.sing_loc} \
	run_pepper_margin_deepvariant call_variant \
	-b "{input.bam}" \
	-f "{input.fa}" \
	-o "{output}" \
	-t "{threads}" \
	{params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par6} {params.par7} {params.par8} {params.par9} {params.par10} {params.adv} \
	--ont_r10_q20
        """

rule snv_deepvariant_vep:
    input:
        working_dir + "/{sample}/snv/{sample}_deepvariant"
    output:
        working_dir + "/{sample}/snv/{sample}_deepvariant_vep.vcf"
    conda:
        config["conda_envs"]["vep"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_vep"]["adv"],
        par1 = only_flag(config["par_vep"]["--everything"]),
        par2 = only_flag(config["par_vep"]["--cache"]),
        par3 = config["par_vep"]["--dir_cache"],
        par4 = only_flag(config["par_vep"]["--coding_only"]),
        par5 = only_flag(config["par_vep"]["--no_intergenic"]),
        par6 = hg_to_GRCh(config["ref_version"]),
        par7 = config["par_vep"]["--offline"]
    log:
        working_dir + "/{sample}/logs/deepvariant_vep.log"
    shell:
        "vep -format vcf -i {input}/PEPPER_MARGIN_DEEPVARIANT_FINAL_OUTPUT.vcf.gz -o {output} --vcf --fork {threads} --assembly {params.par6} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par7} {params.adv}"

rule sv_sniffles:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        bai=input_varcall+".bai"
    output:
        working_dir + "/{sample}/sv/{sample}_sniffles.vcf"
    conda:
        config["conda_envs"]["sniffles"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_snif"]["adv"],
        par1 = only_flag(config["par_snif"]["--phase"]),
        par2 = config["par_snif"]["--minsupport"],
        par3 = config["par_snif"]["--minsvlen"],
        par4 = config["par_snif"]["--mapq"],
        par5 = only_flag(config["par_snif"]["--no-qc"])
    log:
        working_dir + "/{sample}/logs/sniffles2.log"
    shell:
      "sniffles {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.adv} --input {input.bam} --reference {input.fa} --vcf {output} --threads {threads}"

rule sv_sniffles_annotsv:
    input:
        working_dir + "/{sample}/sv/{sample}_sniffles.vcf"
    output:
        working_dir + "/{sample}/sv/{sample}_sniffles_annotsv.tsv"
    params:
        adv = config["par_ann"]["adv"],
        par1 = config["par_ann"]["-SVinputInfo"],
        par2 = config["par_ann"]["-annotationMode"],
        par3 = config["par_ann"]["-tx"],
        par4 = config["par_ann"]["-SVminSize"],
        par5 = hg_to_GRCh(config["ref_version"]),
        ann_usage = config["tool_usage"]["annotsv"]
    log:
        working_dir + "/{sample}/logs/sniffles_annotsv.log"
    shell:
        "{params.ann_usage} -genomeBuild {params.par5} -SVinputFile {input} -outputFile {output} {params.par1} {params.par2} {params.par3} {params.par4} {params.adv} -vcf 1 -svtBEDcol 1"

rule sv_svim:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        bai=input_varcall+".bai"
    output:
        directory(working_dir + "/{sample}/sv/{sample}_svim")
    conda:
        config["conda_envs"]["svim"]
    params:
        adv = config["par_svim"]["adv"],
        par1 = config["par_svim"]["--min_mapq"],
        par2 = config["par_svim"]["--min_sv_size"],
        par3 = config["par_svim"]["--max_sv_size"],
        par4 = only_flag(config["par_svim"]["--skip_genotyping"]),
        par5 = config["par_svim"]["--minimum_score"],
        par6 = config["par_svim"]["--minimum_depth"]
    log:
        working_dir + "/{sample}/logs/svim.log"
    shell:
      "svim alignment {output} {input.bam} {input.fa} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par6} {params.adv} " 

rule sv_svim_annotsv:
    input:
        working_dir + "/{sample}/sv/{sample}_svim"
    output:
        working_dir + "/{sample}/sv/{sample}_svim_annotsv.tsv"
    params:
        adv = config["par_ann"]["adv"],
        par1 = config["par_ann"]["-SVinputInfo"],
        par2 = config["par_ann"]["-annotationMode"],
        par3 = config["par_ann"]["-tx"],
        par4 = config["par_ann"]["-SVminSize"],
        par5 = hg_to_GRCh(config["ref_version"]),
        ann_usage = config["tool_usage"]["annotsv"]
    log:
        working_dir + "/{sample}/logs/svim_annotsv.log"
    shell:
        "{params.ann_usage} -genomeBuild {params.par5} -SVinputFile {input}/variants.vcf -outputFile {output} {params.par1} {params.par2} {params.par3} {params.par4} {params.adv} -vcf 1 -svtBEDcol 1"

rule sv_cutesv:
    input:
        fa=config["ref_genome"],
        bam=input_varcall,
        bai=input_varcall+".bai",
        wd=working_dir + "/{sample}"
    output:
        working_dir + "/{sample}/sv/{sample}_cutesv.vcf"
    conda:
        config["conda_envs"]["cutesv"]
    threads: paralelization_func(int(config["paral_threads"]), config)
    params:
        adv = config["par_cut"]["adv"],
        par1 = config["par_cut"]["--min_mapq"],
        par2 = config["par_cut"]["--min_read_len"],
        par3 = config["par_cut"]["--min_support"],
        par4 = config["par_cut"]["--min_size"],
        par5 = config["par_cut"]["--max_size"],
        par6 = only_flag(config["par_cut"]["--genotype"])
    log:
        working_dir + "/{sample}/logs/cutesv.log"
    shell:
        "cuteSV -t {threads} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par6} {params.adv} {input.bam} {input.fa} {output} {input.wd}"

rule sv_cutesv_annotsv:
    input:
        working_dir + "/{sample}/sv/{sample}_cutesv.vcf"
    output:
        working_dir + "/{sample}/sv/{sample}_cutesv_annotsv.tsv"
    params:
        adv = config["par_ann"]["adv"],
        par1 = config["par_ann"]["-SVinputInfo"],
        par2 = config["par_ann"]["-annotationMode"],
        par3 = config["par_ann"]["-tx"],
        par4 = config["par_ann"]["-SVminSize"],
        par5 = hg_to_GRCh(config["ref_version"]),
        ann_usage = config["tool_usage"]["annotsv"]
    log:
        working_dir + "/{sample}/logs/cutesv_annotsv.log"
    shell:
        "{params.ann_usage} -genomeBuild {params.par5} -SVinputFile {input} -outputFile {output} {params.par1} {params.par2} {params.par3} {params.par4} {params.adv} -vcf 1 -svtBEDcol 1"

if "somatic" in config["gas_som_selection"]:

    rule sv_som_gasoline:
        input:
            bam=input_varcall,
            wd=working_dir + "/{sample}",
            fa=config["ref_genome"],
            cntrl = config["par_gas"]["som_ref"]
        output:
            working_dir + "/{sample}/sv/{sample}_gasoline/gasoline_final.vcf"
        threads: paralelization_func(int(config["paral_threads"]), config)
        params:
            ref_vers = config["ref_version"],
            sample = "{sample}",
            qual = config["par_gas"]["pars_Q"],
            bed = config["par_gas"]["pars_T"],
            germ1 = config["par_gas"]["germ_NS"],
            germ2 = config["par_gas"]["germ_Q"],
            germ3 = config["par_gas"]["germ_MS"],
            germ4 = config["par_gas"]["germ_OT"],
            som1 = config["par_gas"]["som_NS"],
            som2 = config["par_gas"]["som_Q"],
            som3 = config["par_gas"]["som_MS"],
            som4 = config["par_gas"]["som_OV"],
            somvcf1 = config["par_gas"]["som_vcf_TS"],
            somvcf2 = config["par_gas"]["som_vcf_TC"],
            somvcf3 = config["par_gas"]["som_vcf_TI"],
            somvcf4 = config["par_gas"]["som_vcf_TO"],
            somvcf5 = config["par_gas"]["som_vcf_TR"],
            somvcf6 = config["par_gas"]["som_vcf_TP"],
            somvcf7 = config["par_gas"]["som_vcf_TH"],
            gas_usage = config["tool_usage"]["gasoline"]
        log:
            working_dir + "/{sample}/logs/gasoline_som.log"
        shell:
            """
            cd {params.gas_usage}
            perl GASOLINEParse.pl -B {input.cntrl} -L Control -O {input.wd}/sv/{params.sample}_gasoline/control -R {params.ref_vers} {params.qual} {params.bed}
            perl GASOLINEParse.pl -B {input.bam} -L Test -O {input.wd}/sv/{params.sample}_gasoline/test -R {params.ref_vers} {params.qual} {params.bed}
            perl GASOLINESomaticDetector.pl -BT {input.bam} -BC {input.cntrl} -LT Test -LC Control -LS TestControl -OT {input.wd}/sv/{params.sample}_gasoline/test -OC {input.wd}/sv/{params.sample}_gasoline/control -OS {input.wd}/sv/{params.sample}_gasoline/comparison {params.qual} -NT {threads} {params.som1} {params.som2} {params.som3} {params.som4}
            perl GASOLINESomaticVCFCreate.pl -LT Test -LC Control -LS TestControl -IS {input.wd}/sv/{params.sample}_gasoline/comparison -OS {output} -RA {params.ref_vers} -FR {input.fa} {params.somvcf1} {params.somvcf2} {params.somvcf3} {params.somvcf4} {params.somvcf5} {params.somvcf6} {params.somvcf7}
            """

else:

    rule sv_germ_gasoline:
        input:
            bam=input_varcall,
            wd=working_dir + "/{sample}",
            fa=config["ref_genome"]
        output:
            working_dir + "/{sample}/sv/{sample}_gasoline/gasoline_final.vcf"
        threads: paralelization_func(int(config["paral_threads"]), config)
        params:
            sample = "{sample}",
            ref_vers = config["ref_version"],
            qual = config["par_gas"]["pars_Q"],
            bed = config["par_gas"]["pars_T"],
            germ1 = config["par_gas"]["germ_NS"],
            germ2 = config["par_gas"]["germ_Q"],
            germ3 = config["par_gas"]["germ_MS"],
            germ4 = config["par_gas"]["germ_OT"],
            germvcf1 = config["par_gas"]["germ_vcf_TS"],
            germvcf2 = config["par_gas"]["germ_vcf_TC"],
            germvcf3 = config["par_gas"]["germ_vcf_TI"],
            germvcf4 = config["par_gas"]["germ_vcf_TO"],
            gas_usage = config["tool_usage"]["gasoline"]
        log:
            working_dir + "/{sample}/logs/gasoline_germ.log"
        shell:
            """
            cd {params.gas_usage}
            perl GASOLINEParse.pl -B {input.bam} -L Germ -O {input.wd}/sv/{params.sample}_gasoline/germ -R {params.ref_vers} {params.qual} {params.bed}
            perl GASOLINEGermlineDetector.pl -B {input.bam} -L Germ -O {input.wd}/sv/{params.sample}_gasoline/germ {params.qual} -NT {threads} {params.germ1} {params.germ2} {params.germ3} {params.germ4}
            perl GASOLINEGermlineVCFCreate.pl -L Germ -I {input.wd}/sv/{params.sample}_gasoline/germ -O {output} -RA {params.ref_vers} -FR {input.fa} {params.germvcf1} {params.germvcf2} {params.germvcf3} {params.germvcf4}
            """

rule sv_gasoline_annotsv:
    input:
        working_dir + "/{sample}/sv/{sample}_gasoline/gasoline_final.vcf"
    output:
        working_dir + "/{sample}/sv/{sample}_gasoline_annotsv.tsv"
    params:
        adv = config["par_ann"]["adv"],
        par1 = config["par_ann"]["-SVinputInfo"],
        par2 = config["par_ann"]["-annotationMode"],
        par3 = config["par_ann"]["-tx"],
        par4 = config["par_ann"]["-SVminSize"],
        par5 = hg_to_GRCh(config["ref_version"]),
        ann_usage = config["tool_usage"]["annotsv"]
    log:
        working_dir + "/{sample}/logs/gasoline_annotsv.log"
    shell:
        "{params.ann_usage} -genomeBuild {params.par5} -SVinputFile {input} -outputFile {output} {params.par1} {params.par2} {params.par3} {params.par4} {params.adv} -vcf 1 -svtBEDcol 1"



if ext ==".vcf" or ext==".gz":
    input_annot=config["in_file"]

    rule vep_vcf:
        input:
            input_annot
        output:
            working_dir + "/{sample}/snv/{sample}_vep.vcf"
        conda:
            config["conda_envs"]["vep"]
        threads: cores
        params:
            adv = config["par_vep"]["adv"],
            par1 = only_flag(config["par_vep"]["--everything"]),
            par2 = config["par_vep"]["--cache"],
            par3 = config["par_vep"]["--dir_cache"],
            par4 = only_flag(config["par_vep"]["--coding_only"]),
            par5 = only_flag(config["par_vep"]["--no_intergenic"]),
            par6 = hg_to_GRCh(config["ref_version"]),
            par7 = only_flag(config["par_vep"]["--offline"]),
            par8 = config["par_vep"]["--fasta"]
        log:
            working_dir + "/{sample}/logs/vep.log"
        shell:
            "vep -format vcf -i {input} -o {output} --vcf --fork {threads} --assembly {params.par6} {params.par1} {params.par2} {params.par3} {params.par4} {params.par5} {params.par7} {params.par8} {params.adv}"

    rule annotsv_vcf:
        input:
            input_annot
        output:
            working_dir + "/{sample}/sv/{sample}_annotsv.tsv"
        params:
            adv = config["par_ann"]["adv"],
            par1 = config["par_ann"]["-SVinputInfo"],
            par2 = config["par_ann"]["-annotationMode"],
            par3 = config["par_ann"]["-tx"],
            par4 = config["par_ann"]["-SVminSize"],
            par5 = hg_to_GRCh(config["ref_version"]),
            ann_usage = config["tool_usage"]["annotsv"]
        log:
            working_dir + "/{sample}/logs/annotsv.log"
        shell:
            "{params.ann_usage} -genomebuild {params.par5} -SVinputFile {input} -outputFile {output} {params.par1} {params.par2} {params.par3} {params.par4} {params.adv} -vcf 1 -svtBEDcol 1"
